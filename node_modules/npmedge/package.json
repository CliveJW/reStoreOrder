{
  "name": "npmedge",
  "version": "0.1.3",
  "description": "Lists packages whose latest available version does not satisfy the specification in package.json",
  "keywords": [
    "latest",
    "version",
    "packages",
    "package",
    "update",
    "outdated",
    "discover",
    "new"
  ],
  "homepage": "https://jakut.is/git/NPMEDGE/about/",
  "author": {
    "name": "Vytautas Jakutis",
    "email": "vytautas@jakut.is",
    "url": "http://jakut.is/"
  },
  "repository": {
    "type": "git",
    "url": "https://jakut.is/git/NPMEDGE"
  },
  "main": "./lib/main",
  "bin": {
    "npmedge": "./bin/npmedge"
  },
  "license": "MIT",
  "dependencies": {
    "semver": "1.1.x",
    "async": "0.2.x",
    "valentine": "1.6.x",
    "optimist": "0.5.x",
    "npm": "1.2.x"
  },
  "devDependencies": {},
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "readme": "# Installation\n\nJust run `npm install -g npmedge` to install globally, or `npm install npmedge` to install locally.\n\n# Usage\n\nLists packages whose latest available version does not satisfy the specification in package.json.\nUseful when your package.json contains specific versions of packages and you want to check if the specification is outdated thus discovering new versions.\n\nRun `npmedge` in a folder with `package.json` file or specify the path to it - run `npmedge path/to/your/package.json`.\nIf you have installed npmedge locally, then run `./node_modules/.bin/npmedge` instead of `npmedge`.\nIf it does not work, try to run `node ./node_modules/.bin/npmedge`.\n",
  "readmeFilename": "README.md",
  "_id": "npmedge@0.1.3",
  "dist": {
    "shasum": "60fe7dcf2088cbc7039731645216ab22405e95d7"
  },
  "_from": "npmedge@~0.1.1",
  "_resolved": "https://registry.npmjs.org/npmedge/-/npmedge-0.1.3.tgz"
}
